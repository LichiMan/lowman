//--------------------------------------------------------------------------//
//  lmGuidesCreate.mel
//
//  Author:		Miguel González Viñé
//				lichiman@gmail.com
//
//  Version:		0.0.1
//  Date:			Jan 09, 2007
//
//  Description:	Create a straight "spine" of guides.
//
//  Usage:		Use "lmGuidesCreate $creatureName $guideName $guideUnits $guideDistance;"
//				$creatureName Name of the creature to parent.
//				$guideName Name of the guide.
//				$guideSide Side of the guide (L, R or C).
//				$guideUnits is the number of guides.
//				$guideDistance distance between guides.
//
//
//  Return:		none
//
//  Files Needed:
//			lmCreatureCreate.mel
//			lmCreatureExists.mel
//			lmChannelControl.mel
//
//--------------------------------------------------------------------------/
global proc lmGuidesCreate(string $creatureName, string $guideName, string $guideSide, int $guideUnits, int $guideDistance)
{
	// String for the selected object
	string $selected[] = `ls -sl`;

	// Check if $creatureName exists
	string $creature = `lmCreatureExists $creatureName`;
	if ($creature == "")
		$creature = `lmCreatureCreate $creatureName`;
	string $creatureChilds[] = `listRelatives -c -type transform $creature`;
	string $placementGRP = $creatureChilds[0];
	string $jointsGRP = $creatureChilds[1];
	string $geometryGRP = $creatureChilds[2];
	string $constraintsGRP = $creatureChilds[3];
	string $clustersGRP = $creatureChilds[4];
	string $extrasGRP = $creatureChilds[5];

	// Check for errors
	$guideSide = `capitalizeString $guideSide`;
	if ($guideSide != "L" && $guideSide != "R" && $guideSide != "C")
		error "Wrong guideSide. Write L, R or C.";

	for ($i=0; $i<$guideUnits; $i++)
	{
	// Create GISs
	int $j = $i+1;
	string $GISshape = `createNode implicitSphere`;
	string $GIS[] = `listRelatives -p -type transform $GISshape`;
	$GIS[0] = `rename $GIS[0] ($guideName+$j+"_"+$guideSide+"_GIS")`;
	string $GISclean = `substitute ("_"+$guideSide+"_GIS") $GIS[0] ""`;

	xform -ws -t 0 ($guideDistance*$i) 0 $GIS[0];

	if ($i > 0)
		parent $GIS[0] ($guideName+$i+"_"+$guideSide+"_GIS");
	
	// Create GUOs
	string $GUOshape = `createNode locator`;
	string $GUO[] = `listRelatives -p -type transform $GUOshape`;
	$GUO[0] = `rename $GUO[0] ($guideName+$j+"_"+$guideSide+"_GUO")`;

	int $GUOtranslation = 1;
	parent $GUO[0] $GIS[0];
	makeIdentity -apply false -t 1 -r 1 -s 1 $GUO[0];
	setAttr ($GUO[0]+".translateZ") (-$GUOtranslation);
	xform -os -rotatePivot 0 0 $GUOtranslation $GUO[0];
	xform -os -scalePivot 0 0 $GUOtranslation $GUO[0];

	// Create GUCs, its CLUs and its POCs
	if ($i > 0)
	{
		string $GISparent[] = `listRelatives -p -type transform $GIS[0]`;
		string $GISparentClean = `substitute ("_"+$guideSide+"_GIS") $GISparent[0] ""`;
		string $GUC = `curve -d 1 -p 0 0 0 -p 0 0 0 -k 0 -k 1`;
		$GUC = `rename $GUC ($GISparentClean+$GISclean+"_"+$guideSide+"_GUC")`;
		string $GUCshape[] = `listRelatives -shapes -type "nurbsCurve" $GUC`;

		//make CV into a cluster
		string $CLUparent[] = `cluster ($GUCshape[0] + ".cv[0]")`;
		$CLUparent[1] = `rename $CLUparent[1] ($GISparentClean+$GISclean+"Parent_"+$guideSide+"_CLU")`;
		string $POCparent[] = `pointConstraint -name ($GISparentClean+$GISclean+"Parent_"+$guideSide+"_POC") $GISparent[0] $CLUparent[1]`;

		string $CLUchild[] = `cluster ($GUCshape[0] + ".cv[1]")`;
		$CLUchild[1] = `rename $CLUchild[1] ($GISparentClean+$GISclean+"Child_"+$guideSide+"_CLU")`;
		string $POCchild[] = `pointConstraint -name ($GISparentClean+$GISclean+"Child_"+$guideSide+"_POC") $GIS[0] $CLUchild[1]`;

		// Parent GUCs, CLUs and POCs
		parent $GUC $extrasGRP;
		parent $CLUparent[1] $CLUchild[1] $clustersGRP;
		parent $POCparent[0] $POCchild[0] $constraintsGRP;

		// Manage GUCs attributes
		lmChannelControl($GUC,"ALL",0,1);
		setAttr ($GUC+".overrideEnabled") 1;
		setAttr ($GUC+".overrideDisplayType") 2;

		// Manage CLUs attributes
		setAttr ($CLUparent[1]+".visibility") 0;
		lmChannelControl($CLUparent[1],"ALL",0,1);
		setAttr ($CLUparent[1]+".overrideEnabled") 1;
		setAttr ($CLUparent[1]+".overrideDisplayType") 2;
		// Manage CLUs attributes
		setAttr ($CLUchild[1]+".visibility") 0;
		lmChannelControl($CLUchild[1],"ALL",0,1);
		setAttr ($CLUchild[1]+".overrideEnabled") 1;
		setAttr ($CLUchild[1]+".overrideDisplayType") 2;
		
		// Manage POCs attributes
		setAttr ($POCparent[0]+".visibility") 0;
		setAttr ($POCchild[0]+".visibility") 0;
	}


	// Manage GISs attributes
	lmChannelControl($GIS[0],"scale",0,1);
	lmChannelControl($GIS[0],"visibility",0,1);
	addAttr -longName "rotateAim" -attributeType "float" -keyable 1 $GIS[0];
	connectAttr -force ($GIS[0]+".rotateAim") ($GUO[0]+".rotateY");

	// Manage GUOs attributes
	lmChannelControl($GUO[0],"ALL",0,1);
	setAttr ($GUO[0]+".overrideEnabled") 1;
	setAttr ($GUO[0]+".overrideDisplayType") 2;

	}


	select -cl;
}

