//--------------------------------------------------------------------------//
//  lmGuidesCreate.mel
//
//  Author:		Miguel González Viñé
//				lichiman@gmail.com
//
//  Version:		0.0.1
//  Date:			Jan 09, 2007
//
//  Description:	Create a straight "spine" of guides.
//
//  Usage:		Use "lmGuidesCreate $creatureName $guideName $guideUnits $guideDistance;"
//				$creatureName Name of the creature to parent.
//				$guideName Name of the guide.
//				$guideSide Side of the guide (L, R or C).
//				$guideUnits is the number of guides.
//				$guideDistance distance between guides.
//
//
//  Return:		none
//
//  Files Needed:
//			lmCreatureCreate.mel
//			lmCreatureExists.mel
//			lmGuidesGUC.mel
//			lmChannelControl.mel
//
//--------------------------------------------------------------------------/
global proc lmGuidesCreate(string $creatureName, string $guideName, string $guideSide, int $guideUnits, int $guideDistance)
{
	// String for the selected object
	string $selected[] = `ls -sl`;
	string $GIS[];
	// Check if $creatureName exists
	string $creature = `lmCreatureExists $creatureName`;
	if ($creature == "")
		$creature = `lmCreatureCreate $creatureName`;
	string $creatureChilds[] = `listRelatives -c -type transform $creature`;
	string $placementGRP = $creatureChilds[0];
	string $jointsGRP = $creatureChilds[1];
	string $geometryGRP = $creatureChilds[2];
	string $constraintsGRP = $creatureChilds[3];
	string $clustersGRP = $creatureChilds[4];
	string $extrasGRP = $creatureChilds[5];
	if (!`attributeExists "scaleGuides" $placementGRP`)
	{
	addAttr -longName "scaleGuides" -attributeType "float" -minValue 0 -defaultValue 0.2 -keyable 1 $placementGRP;
	addAttr -longName "scaleAim" -attributeType "float" -minValue 0 -defaultValue 0.1 -keyable 1 $placementGRP;
	}

	// Check for errors
	$guideSide = `toupper $guideSide`;
	if ($guideSide != "L" && $guideSide != "R" && $guideSide != "C")
		error "Wrong guideSide. Write L, R or C.";

	for ($i=0; $i<$guideUnits; $i++)
	{
	// Create GISs
	int $j = $i+1;
	string $GISshape = `createNode implicitSphere`;
	string $GIStmp[] = `listRelatives -p -type transform $GISshape`;
	$GIS[$i] = `rename $GIStmp[0] ($creatureName+"_"+$guideName+$j+"_"+$guideSide+"_GIS")`;
	string $tmp[] = `listRelatives -shapes $GIS[$i]`;
	$GISshape = $tmp[0];

	// Parent GISs in the right place
	if ($i == 0 && `lmCreatureTokenize $selected[0] "nodeType"` != "GIS")
		parent $GIS[$i] $placementGRP;
	if ($i == 0 && `lmCreatureTokenize $selected[0] "nodeType"` == "GIS")
	{
		parent $GIS[$i] $selected[0];
		lmGuidesGUC $selected[0] $GIS[$i];
		float $pos[] = `xform -q -ws -t $selected[0]`;
		float $posSide[] = {0,0,0};
		switch ($guideSide)
		{
			case "L":
				$posSide[0] = 1;
				break;
			case "R":
				$posSide[0] = -1;
				break;
			case "C":
				$posSide[2] = -1;
				break;
		}
		xform -ws -t ($pos[0]+$posSide[0]) ($pos[1]+$posSide[1]) ($pos[2]+$posSide[2]) $GIS[$i];
	}
	if ($i > 0)
	{
		parent $GIS[$i] ($creatureName+"_"+$guideName+$i+"_"+$guideSide+"_GIS");
		makeIdentity -apply false -t 1 -r 1 -s 1 $GIS[$i];
		xform -os -t 0 $guideDistance 0 $GIS[$i];
	}
	
	// Create GUOs
	string $GUOshape = `createNode locator`;
	string $GUO[] = `listRelatives -p -type transform $GUOshape`;
	$GUO[0] = `rename $GUO[0] ($creatureName+"_"+$guideName+$j+"_"+$guideSide+"_GUO")`;
	$tmp = `listRelatives -shapes $GUO[0]`;
	$GUOshape = $tmp[0];

	int $GUOtranslation = 1;
	parent $GUO[0] $GIS[$i];
	makeIdentity -apply false -t 1 -r 1 -s 1 $GUO[0];
	setAttr ($GUO[0]+".translateZ") (-$GUOtranslation);
	xform -os -rotatePivot 0 0 $GUOtranslation $GUO[0];
	xform -os -scalePivot 0 0 $GUOtranslation $GUO[0];

	// Create GUCs, its CLUs and its POCs
	if ($i > 0)
	{
	string $GISparent[] = `listRelatives -p -type transform $GIS[$i]`;
	lmGuidesGUC $GISparent[0] $GIS[$i];
	}

	// Manage GISs attributes
	lmChannelControl($GIS[$i],"scale",0,1);
	lmChannelControl($GIS[$i],"visibility",0,1);
	addAttr -longName "rotateAim" -attributeType "float" -keyable 1 $GIS[$i];
	connectAttr -force ($GIS[$i]+".rotateAim") ($GUO[0]+".rotateY");
	lmCreaturePart $GIS[$i];
	if ($i > 0)
		setAttr -lock 1 ($GIS[$i]+".creaturePart") 10;

	// Manage GUOs attributes
	lmChannelControl($GUO[0],"ALL",0,1);
	setAttr ($GUO[0]+".overrideEnabled") 1;
	setAttr ($GUO[0]+".overrideDisplayType") 2;

	// Manage placement attributes
	connectAttr -force ($placementGRP+".scaleGuides") ($GISshape+".radius");
	connectAttr -force ($placementGRP+".scaleAim") ($GUOshape+".localScaleX");
	connectAttr -force ($placementGRP+".scaleAim") ($GUOshape+".localScaleY");
	connectAttr -force ($placementGRP+".scaleAim") ($GUOshape+".localScaleZ");

	}


	select $GIS[0];
}

